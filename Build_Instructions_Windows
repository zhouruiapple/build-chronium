Build Instructions (Windows)
Setting up Windows

You must set your Windows system locale to English, or else you may get build errors about "The file contains a character that cannot be represented in the current code page."

Setting up the environment for Visual Studio 2013

You must build with Visual Studio 2013 Update 4, no other versions are supported.

You must have Windows 7 x64 or later. x86 OSs are unsupported.

Step 1: Get depot_tools.

Step 2: Follow the appropriate path below:
Open source contributors
Install Visual Studio 2013 Community or Visual Studio 2013 Professional depending on which license is appropriate for you. You can deselect the default options if you want, but you must make sure to install "Microsoft Foundation Classes for C++".

Install Visual Studio 2015 Update 1 or later - Community Edition should work if its license is appropriate for you. This will also install the Windows 10 10.0.10586 SDK or later.

You should also install the Windows 10 SDK to the default install location. You must have SDK version 10.0.10586 or greater installed.

Run set DEPOT_TOOLS_WIN_TOOLCHAIN=0, or set that variable in your global environment.

Visual Studio Express is not supported and will not be able to build Chromium.

Compilation is done through ninja, not Visual Studio.
Google employees
Run: download_from_google_storage --config and follow the authentication instructions. Note that you must authenticate with your @google.com credentials, not @chromium.org. Enter "0" if asked for a project-id.

Once you've done this, the toolchain will be installed automatically for you in Step 3, below (near the end of the step).

The toolchain will be in depot_tools\win_toolchain, and windbg can be found in depot_tools\win_toolchain\vs2013_files\win8sdk\Debuggers.

If you want the IDE for debugging and editing, you will need to install it separately, but this is optional and not needed to build Chromium. 
Step 3: Follow the steps to check out the code (largely "fetch chromium").

Step 4: ninja -C out\Debug chrome

Substitute the build directory given to -C with out\Debug_x64 for 64-bit builds in GYP, or whatever build directory you have configured if using GN.

If you're primarily going to be doing debug dev builds, you'll want to turn on the component build (in GYP do set GYP_DEFINES=component=shared_library, in GN, set the build arg is_component_build = true). This will generate many DLLs and enable incremental linking, which makes linking much faster in Debug.
